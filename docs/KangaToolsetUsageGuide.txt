Kanga (K-mer Adaptive Next Gen Aligner) toolset usage guide
Version 1.0.5 Release  10th November 2010
Author: Stuart Stephen
        Jen Taylor's Bioinformatics Group,
	CSIRO, Canberra, Australia
Please report issues and comments to: stuart.stephen@csiro.au
=============================================================

The kanga toolset is comprised of three major system components, of which one
is optional, targeted towards an overall objective of efficient and accurate
alignment of NG short reads against a reference genome assembly.
These components are -
kangax : Used to generate an extremely optimised suffix array lookup database
         containing the reference genome assembly against which the NG short
	 read datasets are to be subsequently aligned.
kangar : This is the optional component, which can be used to pre-process the
         NG short read datasets into a format which is optimised for fast and
	 efficient loading by the kanga aligner.
kanga :  Kanga is the aligner component. It's major inputs are the reference
         genome assembly database as generated by kangax, and either a kangar
	 preprocessed dataset or the raw fasta/fastq readset files. The
	 primary output from kanga are the alignments in one of a number of
	 user selected output formats.

To install, simply copy the component binaries (kanga, kangar, and kangax)
into a directory which is on your executable path.
There are a number of user specified parameters specific to each component of
the kanga toolset.  Most of these are optional, and optional parameters would
generally only be required to be specified by the user when targeting some
specific alignment issue. In general, the only mandatory parameters are those
specifying input datasets and where to write output result sets.

Resource Requirements
---------------------
The Kanga architecture is optimised for execution on modestly resourced
hardware. It is multithreaded so as to take advantage of modern  multicored
CPUs, and processes memory resident datasets which are loaded from
disk at process initiation. To avoid memory paging with consequent disk
threshing it is recommended that there should be at least the following
amount of physical memory installed: 5x the targeted genome assembly size
plus 50 bytes per read times the number of reads times the mean read length.
Thus assuming that the targeted genome is human, and there are 50 million 50bp
reads to align, then the physical memory required to avoid memory paging
should be at least 21GB. If the targeted genome was Arabidopsis, with the same
number of reads, then the minimum physical memory required is reduced down to
approximately 6GB.


Usage Scenario
--------------
In the following simple usage scenario it is assumed that the kanga toolset
has been copied into a directory which is on the users path and thus directly
executable without any path prefixing. It is further assumed that log file
named 'log.txt' is to be created/appended in a 'Logs' directory, that the
targeted genome assembly multifasta files are in a 'genome' directory,  and
raw reads are in a 'reads' directory. These directories are all relative to
the current directory into which the alignment result file is to be created.

Step 1: Create the suffix array lookup database for the reference genome of
interest, which in this scenario will be Arabidopsis with the chromosome
fasta files downloaded from TAIR into the 'genome' directory. The generated
suffix array database is to be called 'araTha9.sfx' and the internal name for
the database is to be 'araTha9'.

>kangax -F./Logs/log.txt -i./genome/*.fasta -o./genome/araTha9.sfx -raraTha9

Step 2A: Using default parameters now align NG short reads against the
targeted reference genome. You have copied an Illumina short reads dataset
into the 'reads' directory, and these all have the '.fastq' extension. The
generated alignments are to be output into a UCSC BED format file for
downstream analysis or display in the UCSC Browser.

>kanga -F./Logs/log.txt -i./reads/*.fastq -I./genome/araTha9.sfx -oaligned.bed

You may have decided that you are going to experiment with different
processing options on the raw red dataset and thus it may be more efficient
to pre-process the raw reads with 'kangar' and then invoke 'kanga' on the
resultant dataset. Step 2A in the forgoing scenario would then be replaced by
the following with expr.rds to contain the pre-processed reads:

Step 2B:
>kangar -F./Logs/log.txt -i./reads/*.fastq -o./reads/expr.rds
>kanga -F./Logs/log.txt -i./reads/expr.rds -I./genome/araTha9.sfx -oaligned.bed

Extended Usage Scenario
-----------------------
In this scenario, the researcher needs to align SOLiD colorspace reads, is
prepared to accept reads which align to at most 3 multiple loci with random
selection of the reported match loci, wants a quick alignment so as to judge
the quality of the sequencing, and is only interested in alignments with at
most 5 mismatches.

Step 1: Create the suffix array lookup database for the reference genome of
interest, which in this scenario will be Human with the chromosome fasta files
downloaded from UCSC into the 'genome' directory. The generated suffix array
database is to be called 'hg19cs.sfx' and the internal name for the database
is to be 'hg19cs'.

>kangax -F./Logs/log.txt -C -i./genome/*.fasta -o./genome/hg19cs.sfx -rhg19cs

Step 2: Using specified parameters now align colorspace short reads against
the targeted reference genome. You have copied the SOLiD short reads dataset
into the 'reads' directory, and these all have the '.csfasta' extension. The
generated alignments are to be output into a UCSC BED format file for
downstream analysis or display in the UCSC Browser.

>kanga -F./Logs/log.txt -C -s5 -s3 -r2 -m2 -i./reads/*.csfasta
                -I./genome/hg19cs.sfx -oaligned.bed

Another usage scenario requires the reporting of all mapped to loci including
reads which have mapped to multiple loci. Because of the potential for
generating extremely large results file for targeted genomes rich in repeat
sequences the range of output formats is restricted to either simple csv or
BED. Additionally microInDel and splice junction detection is not supported.
In the following the user has requested multiloci hit reporting, is allowing
up to 50,000 mapped to loci for any read, and up to 3 mismatches.
>kanga -F./Logs/log.txt -m4 -s3 -r5 -R50000 -i./reads/*.fastq
-I./genome/hg18.sfx -omultialigned.bed

Log File
--------
An optional log file can be created, and this log will also be written to
stdout so the user can observe processing progress.


Toolkit Component Parameters
============================
All kanga components can be invoked with the '-h' option, e.g. '>kanga h',
to display the list of options accepted by that component.

Note: Parameters can be entered into a parameter file, one parameter per line.
      To invoke this parameter file then precede it's name with '@'
      e.g. kanga @myparams.txt

================================================
kanga the K-mer Adaptive Next Generation Aligner
Kanga Release 1.0.5 Options
================================================

-h, --help
This option will display the list of options and brief help as to the function
of each of these options together with default values, and then terminates.

-v, --version, --ver
This option displays the application build version and then terminates.

-f, --FileLogLevel=<int>
Use this option to control the level of diagnostics written to screen and
logfile. Currently most log messages are written at the default level
of diagnostics (3).

-F, --log=<file>
Use to specify the log file to which diagnostics are to be written. If not
specified then diagnostics will be written to screen only.

-m, --mode=<int>
This allows the user to trade off sensitivity against alignment throughput.
In the less sensitive mode larger anchor windows are used and thus reads with
more mismatches may not be alignable, in the more sensitive mode smaller
anchor windows are used thus resulting in reads with more mismatches remaining
alignable but with a reduction in throughput.

-a, --microindellen=<int>
MicroInDels will be detected and reported with a maximum InDel length as
specified by this option. Processing for microInDels will be on those reads
which are unalignable with up to the maximum specified aligner induced
substitutions. To be accepted as a microInDel read there must be at least
one other read at the same loci also determined to contain a microInDel.

-A, --splicejunctlen=<int>
RNA-seq reads may span splice junctions. This option allows for the
exploration of splice junction spanning reads on those reads which are
unalignable using either standard or micoInDel processing. The user
specifies the maximum allowed junction separation (25 to 200000nt).
Potential junctions are scored on both separation distance and presence of
cannonical doner/acceptor sites, and the highest scored junction is
reported provided there are at least two reads covering that same splice
junction.

-C, --colorspace
If aligning SOLiD colorspace reads then this option must be specified.
Additionally, the target genome suffix array must have been generated by
kangax in colorspace mode.

-k, --nomultireads
Usually there will be multiple reads aligning to the same loci, and all
these aligned reads will be accepted. Use this option to restrict the
reported aligned read to one randomly selected read alignment.

 -q, --quality=<int>
 Although Kanga does not use quality scores as it's alignment discriminant,
 the distribution of aligner induced substitutions relative to quality scores
 can be generated in output format 3 ('-M3') and if output stats file
 specified with the '-O<file>' option. The '-q' option parameter specifies
 the input reads fastq quality score type.

 -r, --mlmode=<int>
 If the user has requested that reads mapping to multiple loci are to be
 returned then this option specifies which of the mapped loci are to be
 rported as the aligned to loci. The user may request that the loci be
 randomly selected from the mapped range, or that the selected loci is
 proximal to other uniquely mapped reads, or that the selected loci be from
 a loci proximal to other multimapped loci. Alternately the user
 may request that Kanga is to output all loci to which reads map including
 multimapped reads - caution: this may result in huge result file being
 generated as some reads may map to many thousands of loci.


 -R, --maxmulti=<int>
 A limit can be set on the number of loci any read may align to, and
 only those reads aligning within this limit will then be processed
 according to the mlmode as specified by the '-r' option.

 -b, --bisulfite processing
 If the reads are as a result of bisulfite processing then this option must
 be specified. Additionally the target genome suffix array must have been
 generated in bisulfite methylation patterning mode.

 -e, --editdelta=<int>
 The user can specify that accepted matches must be at least this Hamming
 distance from the next best match. If not specified then the default is 1.

 -s, --substitutions=<int>
 This option is used to specify the maximum number of aligner induced
 substitutions in any accepted alignment. If not specified then a default
 of 1/10th of the individual read length is used, e.g. if the read length
 is 75 then the maximum allowed substitutions for that read will be set to
 7.

 -n, --maxns=<int>
 Use to specify the maximum number of indeterminate 'N's in reads before
 treating that read as unalignable. If not specified then will be
 defaulted to one indeterminate 'N' allowed.

 -x, --minflankexacts=<int>
 With current sequencing technolgies most errors tend to be towards the
 read flanks, This option allows the user to request that aligned reads
 will be 5' and 3' flank trimmed towards the centre of the read until at
 least this number of exactly matching bases are encountered. The default
 is for no flank trimming.

 -p, --snpreadsmin=<int>
 If this option is specified then SNP detection is enabled. The option
 parameter is used to specify the required minimum read coverage at any loci
 before processing that loci for SNP determination. The default is for no SNP
 processing.

 -P, --snpreadsprob=<dbl>
 SNPs will only be called if the probability of a false positive
 as determined by binominal CDF is less than the parameter value.
 If not specified then a default of 0.001 is used.

 -M, --format=<int>
 Results can be generated in a number of output formats. This option can be
 used to specify output as either CSV (with, or without sequences), UCSC BED,
 or as SAM. If not specified then CSV loci only output format is used.

 -t, --title=<string>
 When generating results in BED format, this option parameter may be
 used to specify the track title.

 -i, --in=<file>
 User uses this option to specify that reads are to be input from this
 processed (kangar) reads file, or raw reads from these (wildcards allowed)
 raw reads files.

 -I, --sfx=<file>
 This option specifies the suffix array file (generated by kangax) containing
 the target genome against which reads are to be aligned. If the '-C'
 colorspace option or the '-b' bisulphite processing option is specified then
 Kanga will check that the suffix array file was appropriately generated.

 -o, --out=<file>
 Primary alignment results will be written to this file which should be named
 appropriately for the requested output format as specified with the
 '-M' option parameter. If user has requested microInDel processing then
 these will be written to a separate results file having the same root name
 as the primary results file and having the extension '.ind'. If user has
 requested splice junction processing then these will be written to a separate
 results file having the same root name as the primary results file and
 having the extension '.jct'. If user has requested SNP processing
 then these will be written to a separate results file having the same root
 name as the primary results file and having the extension '.snp'.

  -j, --nonealign=<file>
 User may specify that all unalignable reads be written to this file (requires
 '-M3' output mode specified) for post-processing.

 -J, --multialign=<file>
 User may specify that all reads which align to more than one loci be
 written to this file (requires '-M3' output mode specified).

 -O, --stats=<file> output
 Aligner induced substitution distribution stats can be output to this file
 (requires '-M3' output mode specified)

 -H, --hamming=<file>
 Optional pre-generated Hamming edit distance file for targeted genome.
 Currently only used in CSV results output format mode, and only applicable
 if the generated Hammings are for K-mers of the same length as the reads. Not
 normally specified.

 -Z, --chromexclude=<string>
 Regular expressions defining chromosomes to exclude

 -z, --chromeinclude=<string>
 Regular expressions defining chromosomes to include

 -D, --TargDep Generate
 To save processing time in a workflow pipeline, if this option is specified
 then target file(s) will be generated only if missing or older than any of
 the independent source files.

 -T, --threads=<int>
 Use to specify the number of processing threads 0..n (defaults
 to 0 which sets threads to actual number of CPU cores) to utilise.

 =========================================================
 kangax the K-mer Adaptive Next Generation Aligner indeXer
 Kangax Release 1.0.5 Options
 =========================================================

 -h, --help
This option will display the list of options and brief help as to the function
of each of these options together with default values, and then terminates.

-v, --version, --ver
This option displays the application build version and then terminates.

-f, --FileLogLevel=<int>
Use this option to control the level of diagnostics written to screen and
logfile. Currently most log messages are written at the default level
of diagnostics (3).

-F, --log=<file>
Use to specify the log file to which diagnostics are to be written. If not
specified then diagnostics will be written to screen only.

 -m, --mode=<int>
 Suffix array can be generated for standard processing or for bisulfite
 methylation processing. Default is for standard processing.

 -C, --colorspace
 If specified then suffix array generated for use in Kanga colorspace (SOLiD)
 read alignment processing. Default is for basespace processing.

 -s, --blockseqlen=<int>
 Generated suffix blocks to hold at most this length (MB)
 concatenated sequences (default = 3300).

 -i <file>
 Build suffix array from sequences contained in the option parameter
 specified wildcarded kangas generated files or raw fasta files.

-o <file>
Use to specify the output suffix array file name.

-r, --ref=<string>
Use to specify the reference species name.

-d, --descr=<string>
Use to more fully describe the species and origin of the source files.

-t, --title=<string>
Short title is used in BED files generated by kanga

-D, --TargDep
To save processing time in a workflow pipeline, if this option is specified
then target file(s) will be generated only if missing or older than any of
the independent source files.

====================================================================
kangar the K-mer Adaptive Next Generation Aligner Reads preprocessor
Kangar Release 1.0.5 Options
====================================================================

-h, --help
This option will display the list of options and brief help as to the function
of each of these options together with default values, and then terminates.

-v, --version, --ver
This option displays the application build version and then terminates.

-f, --FileLogLevel=<int>
Use this option to control the level of diagnostics written to screen and
logfile. Currently most log messages are written at the default level
of diagnostics (3).

-F, --log=<file>
Use to specify the log file to which diagnostics are to be written. If not
specified then diagnostics will be written to screen only.

-m, --mode=<int>
Use this option to specify the processing mode. The default is to simply
preprocess the input multifasta or fastq reads files into a binary format for
subsequent alignment by kanga

-k, --keepdups
This option is used to request that duplicate reads (reads with identical
sequences) be removed retaining only one. Default is not to remove
any duplicated reads.

-q, --quality=<int>
This option is used to specify the fastq quality scoring format. Normally not
used as kanga uses Hamming distances instead of quality scores as the
discriminant. Default is not to process the quality scores.

-t, --trim5=<int>
User can request that this many bases be trimmed from the 5' read sequence
flank, the default is for no 5' trimming.

-T, --trim3=<int>
User can request that this many bases be trimmed from the 3' read sequence
flank, the default is for no 3' trimming.

-i, --in=<file>
This option specifies the input raw sequencer read files, wildcards are
allowed.

-I, --exclin=<file>
User can qualify the input raw sequencer read files by specifying those
which are to be excluded from processing.

-o, --out=<file>
Use this option to specify the output processed reads file.

-n, --numreadslimit=<int>
For test purposes the user can limit the number of reads processed from each
input file to be this many. The default is for all reads to be processed.

-D, --TargDep
To save processing time in a workflow pipeline, if this option is specified
then target file(s) will be generated only if missing or older than any of
the independent source files.




























