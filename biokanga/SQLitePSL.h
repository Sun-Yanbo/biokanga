// Copyright 2013 CSIRO  ( http://www.csiro.au/ ) 
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License
//   Please contact stuart.stephen@csiro.au for support or 
//   to submit modifications to this source

#pragma once

const int cMaxIdntNameLen = 80;		// experiment identifiers and other names can be of this maximal length
const int cMaxSeqNameLen =  80;		// query and targeted sequence names can be of this maximal length
const int cMaxIdntDescrLen = 1000;	// allow experiment conditions, and other descriptive fields, to be described by text of this maximal length

const int cMaxCacheExprIDs = 100;		// cache the last 100 experiment identifiers

const int cMaxInBuffSize  = 10000000;	// read in chunks of this size from source psl file
const int cMaxLenPSLline = 32000;		// max length PSL line expected - just a guess!
const int cMaxNumPSLblocks = 1000;		// max number of blocks in any PSL alignment - again just a guess!

typedef struct TAG_sStmsSQL {
	char *pTblName;					// table name
	char *pszCreateTbl;				// SQL statement used to create the table
	char *pszInsert;				// SQL statement used to insert row into table
	sqlite3_stmt *pPrepInsert;		// prepared insert row statement; NULL if not prepared
	char *pszOpenCreateSafeIndexes;	// SQL statement used to create indexes on this table immediately after opening this database, essentially these are used whilst populating
	char *pszOpenCreateIndexes;		// SQL statement used to create indexes on this table immediately after opening this database, when it is known the inputs are generated by 'genmarkers' essentially these are used whilst populating
	char *pszCreateIndexes;			// SQL statement used to create indexes on this table before closing the database
	char *pszDropIndexes;			// SQL statement used to drop indexes on this table
} tsStmSQL;

class CSQLitePSL
{
	char m_szPSLinFile[_MAX_PATH];  // processing this input PSL file
	int m_hPSLinFile;				// opened file handle for psl files
	UINT8 *m_pInBuffer;				// mem allocd to buffer chars being read from psl
	size_t m_AllocdInBuffer;		// m_pInBuffer allocated to hold at most this many chars
	int m_NumInBuffer;				// num of chars currently in pInBuffer
	int m_InBuffIdx;				// index of next char to read from pInBuffer[]
	int m_PushedBack;				// last pushed back char (only 1 level of pushback supported!)

	UINT8 *m_pszPSLLineBuff;		// allocd PSL line buffer
	size_t m_AllocdPSLLineBuffer;	// m_pszPSLLineBuff allocated to hold at most this many chars
	int m_CurLineLen;				// current line length in pszLineBuff

	int m_PMode;					// processing mode, 0 to delete any existing then create new SQLite, 1 to append to existing SQLite
	int m_MinIdentity;				// minimum required identity
	int m_MinScore;					// minimum required score
	int m_MinMatches;				// minimum required base matches

	int m_NumBlatHitsParsed;		// number of blat hits parsed
	int m_NumBlatHitsAccepted;		// number of blat hits accepted

	sqlite3 *m_pDB;						// pts to instance of SQLite
	static tsStmSQL m_StmSQL[3];		// SQLite table and index statements

	int m_NumAlignments;				// number of alignments added to TblBlatAlignments
	int m_NumBlocks;					// number of alignment blocks added to TblBlatAlignmentBlocks

	int		GetNxtPSLChr(void);			// returns buffered PSL file char,  0: EOF, -1: error, >0 chr 

	int ProcessPSLline(int ExprID);		// parse alignment PSL line which is in this experiment

	int ProcessPSLFile(char *pszInPSL,		// parse and load the alignments in this Blat generated PSL file into SQLite
						    int ExprID);	// the alignments are in this experiment

	int ProcessPSL(int ExprID);

	sqlite3 *
		CreateDatabase(char *pszDatabase,		// database to create (any existing database is deleted then clean created)
						bool bAppend = true);	// true to append onto any existing database

	int
		CloseDatabase(bool bNoIndexes = false);

	int											// errors if < eBSFSuccess, if positive then the ExprID
		CreateExperiment(char *pszExprName,		// experiment name
				char *pszPSLFile,				// alignments were parsed from this BLAT generated PSL file
				char *pszQueryFile,				// Blat'd query sequences in this file
				char *pszTargetFile,			// against targeted sequences in this file
				char *pszExprDescr = NULL,		// describes experiment
				char *pszBlatParams = NULL,		// Blat parameters used
				int ExprType = 0);				// experiment type, currently just a place holder and defaults to 0
	

	int											// errors if < eBSFSuccess else alignment identifier
		AddAlignment(int ExprID,			// alignment was in this experiment
					int Score,				// Alignment score (using Blat pslScore() function)
					int Identity,           // Alignment identity (using Blat 100.0 - pslCalcMilliBad(psl, TRUE) * 0.1)
					int Matches,			// number of matches which aren't repeats
					int Mismatches,			// number of bases which do not match
					int RepMatches,			// number of bases which match but are also repeats
					int NCount,				// number of N bases
					int QNumInDels,			// number of InDel seqs in query
					int QBasesInDels,		// number of bases total in all InDels in query
					int TNumInDels,			// number of InDel seqs in target
					int TBasesInDels,		// number of bases total in all InDels in target
					char *pszStrand,		// '+' or '-' for query strand, optionally followed by '+' or '-' for target genomic strand when using translated alignments
					char *pszQName,			// query sequence name
					int  QSize,				// query sequence size
					int  QStart,			// alignment start psn in query
					int  QEnd,				// alignment end psn in query
					char *pszTName,			// target sequence name
					int  TSize,				// target sequence size
					int  TStart,			// alignment start psn in target
					int  TEnd,				// alignment end psn in target
					int  NumBlocks,			// number of blocks in the alignment
					int  *pBlockSizes,		// array of sizes of each block
					int  *pQStarts,			// starting psn of each block in query
					int  *pTStarts);		// starting psn of each block in target


		// following pslCalcMilliBad(), pslIsProtein() and pslScore() have been extracted from UCSC code at http://genome.ucsc.edu/FAQ/FAQblat.html#blat4
		int pslCalcMilliBad(int Matches,			// number of matches which aren't repeats
			int Mismatches,			// number of bases which do not match
			int RepMatches,			// number of bases which match but are also repeats
			int QNumInDels,			// number of InDel seqs in query
			int TNumInDels,			// number of InDel seqs in target
			int  QSize,				// query sequence size
			int  QStart,			// alignment start psn in query
			int  QEnd,				// alignment end psn in query
			char *pszStrand,		// '+' or '-' for query strand, optionally followed by '+' or '-' for target genomic strand when using translated alignments
			int  TSize,				// target sequence size
			int  TStart,			// alignment start psn in target
			int  TEnd,				// alignment end psn in target
			int  NumBlocks,			// number of blocks in the alignment
			int  *pBlockSizes,		// array of sizes of each block
			int  *pQStarts,			// starting psn of each block in query
			int  *pTStarts,			// starting psn of each block in target,
			bool isMrna = true); // isMrna should be set to TRUE, regardless of whether the input sequence is mRNA or protein

		// is psl a protein psl (are it's blockSizes and scores in protein space) 
		bool pslIsProtein(char *pszStrand,		// '+' or '-' for query strand, optionally followed by '+' or '-' for target genomic strand when using translated alignments
			int  TSize,				// target sequence size
			int  TStart,			// alignment start psn in target
			int  TEnd,				// alignment end psn in target
			int  NumBlocks,			// number of blocks in the alignment
			int  *pBlockSizes,		// array of sizes of each block
			int  *pQStarts,			// starting psn of each block in query
			int  *pTStarts);			// starting psn of each block in target

		int	pslScore(int Matches,			// number of matches which aren't repeats
			int Mismatches,			// number of bases which do not match
			int RepMatches,			// number of bases which match but are also repeats
			int QNumInDels,			// number of InDel seqs in query
			int TNumInDels,			// number of InDel seqs in target
			char *pszStrand,		// '+' or '-' for query strand, optionally followed by '+' or '-' for target genomic strand when using translated alignments
			int  TSize,				// target sequence size
			int  TStart,			// alignment start psn in target
			int  TEnd,				// alignment end psn in target
			int  NumBlocks,			// number of blocks in the alignment
			int  *pBlockSizes,		// array of sizes of each block
			int  *pQStarts,			// starting psn of each block in query
			int  *pTStarts);			// starting psn of each block in target


				
	static char *RemoveQuotes(char *pszRawText);
				
	static int ExecCallbackID(void *pCallP1, // callback function processing identifier (4th arg to sqlite3_exec())
					int NumCols,			// number of result columns 
					char **ppColValues,		// array of ptrs to column values 
					char **ppColName);		// array of ptrs to column names

public:
	CSQLitePSL(void);
	~CSQLitePSL(void);

	int
		ProcessPSL2SQLite(int PMode,			// processing mode, 0 to delete any existing then create new SQLite, 1 to append to existing SQLite
					int MinIdentity,			// minimum required identity
					int MinScore,				// minimum required score
					int MinMatches,				// minimum required base matches
					char *pszDatabase,			// SQLite database file
					char *pszExprName,			// experiment name
					char *pszPSLFile,			// alignments were parsed from this BLAT generated PSL file
					char *pszQueryFile,			// Blat'd query sequences in this file
					char *pszTargetFile,		// against targeted sequences in this file
					char *pszExprDescr = NULL,	// describes experiment
					char *pszBlatParams = NULL,	// Blat parameters used
					int ExprType = 0);			// experiment type, currently just a place holder and defaults to 0

};



